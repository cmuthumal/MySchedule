/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.ActivityController;
import controller.SubjectController;
import extra.LengthRestrictedDocument;
import java.awt.Dimension;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Activity;
import model.Subject;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class ActivityDialog extends javax.swing.JDialog {

    private SubjectController subjectController;
    private ActivityController activityController;
    private DefaultTableModel activityTableModel;
    private ArrayList<Activity> actList = null;
    private int mode;
    private String key = "", type = "subID", selectedID;
    private String[] actIDArray, subCodesArray;
    private boolean activityFlag, dateFlag, fromTimeFlag, toTimeFlag, centreFlag;
    private DateFormat dFormat;

    /**
     * Creates new form ActivityDialog
     */
    public ActivityDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        subjectController = new SubjectController();
        activityController = new ActivityController();
        activityTableModel = (DefaultTableModel) activityTable.getModel();
        activityTable.getTableHeader().setReorderingAllowed(false);

        setCalendar(dateChooser.getJCalendar());
        setFieldDocs();

        dFormat = new SimpleDateFormat("yyyy-MM-dd");

        setSubsCombo();
        clearAndSet(false);
        viewAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        keyText = new javax.swing.JTextField();
        viewAllButton = new javax.swing.JButton();
        searchCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        tablePanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        activityTable = new javax.swing.JTable();
        addNewButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        editPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        fieldsPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        toTimeText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        centreText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fromTimeText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        activityText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox();
        groupText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        selectedSubLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Activities");
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        searchPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        keyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextActionPerformed(evt);
            }
        });

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subject ID", "Activity Type", "Group", "Centre" }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Key");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(keyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAllButton)
                    .addComponent(searchButton))
                .addContainerGap())
        );

        infoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel.setText(" ");

        tablePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        activityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject", "Activity", "Group", "Date", "Time", "Centre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        activityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activityTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(activityTable);
        activityTable.getColumnModel().getColumn(0).setMinWidth(75);
        activityTable.getColumnModel().getColumn(0).setMaxWidth(75);
        activityTable.getColumnModel().getColumn(2).setMinWidth(60);
        activityTable.getColumnModel().getColumn(2).setMaxWidth(60);
        activityTable.getColumnModel().getColumn(3).setMinWidth(100);
        activityTable.getColumnModel().getColumn(3).setMaxWidth(100);
        activityTable.getColumnModel().getColumn(4).setMinWidth(100);
        activityTable.getColumnModel().getColumn(4).setMaxWidth(100);
        activityTable.getColumnModel().getColumn(5).setMinWidth(65);
        activityTable.getColumnModel().getColumn(5).setMaxWidth(65);

        addNewButton.setText("Add New");
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(addNewButton)
                    .addComponent(printButton))
                .addContainerGap())
        );

        editPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fieldsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel8.setText("Centre");

        toTimeText.setText("1600");
        toTimeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTimeTextActionPerformed(evt);
            }
        });
        toTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                toTimeTextKeyTyped(evt);
            }
        });

        jLabel3.setText("Subject");

        centreText.setText("MT");
        centreText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centreTextActionPerformed(evt);
            }
        });

        jLabel7.setText("Time");

        fromTimeText.setText("0900");
        fromTimeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTimeTextActionPerformed(evt);
            }
        });
        fromTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fromTimeTextKeyTyped(evt);
            }
        });

        jLabel5.setText("Group");

        activityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activityTextActionPerformed(evt);
            }
        });

        jLabel6.setText("Date");

        dateChooser.setDateFormatString("yyyy-MM-dd");
        dateChooser.setIcon(new ImageIcon("./icons/calendar-icon.png"));

        jLabel9.setText("-");

        subjectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboActionPerformed(evt);
            }
        });

        groupText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupTextActionPerformed(evt);
            }
        });

        jLabel4.setText("Activity");

        selectedSubLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        selectedSubLabel.setText(" ");

        javax.swing.GroupLayout fieldsPanelLayout = new javax.swing.GroupLayout(fieldsPanel);
        fieldsPanel.setLayout(fieldsPanelLayout);
        fieldsPanelLayout.setHorizontalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(subjectCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(activityText)
                    .addComponent(groupText)
                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(centreText, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGap(0, 86, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel9)
                        .addGap(2, 2, 2)
                        .addComponent(toTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectedSubLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        fieldsPanelLayout.setVerticalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(subjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedSubLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(activityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(groupText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(fromTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(toTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(centreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void fromTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromTimeTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_fromTimeTextKeyTyped

    private void toTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toTimeTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_toTimeTextKeyTyped

    private void subjectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboActionPerformed
        String selectedCode = (String) subjectCombo.getSelectedItem();
        Subject sub = null;

        try {
            sub = subjectController.getSubjectByCode(selectedCode);
        } catch (SQLException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        selectedSubLabel.setText(sub.getTitle());
    }//GEN-LAST:event_subjectComboActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Activity act = setActivity();

        if (!activityFlag) {
            displayMessage("Enter an activity title");
        } else if (!dateFlag) {
            displayMessage("Select a date");
        } else if (!fromTimeFlag | !toTimeFlag) {
            displayMessage("Enter duration");
        } else if (!centreFlag) {
            displayMessage("Enter a centre");
        } else {
            if (mode == 1) {
                boolean added = false;

                try {
                    added = activityController.addActivity(act);
                } catch (SQLException ex) {
                    Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (added) {
                    displayMessage("Record added");
                    searchButtonActionPerformed(null);
                    mode = 0;
                    clearAndSet(false);
                } else {
                    displayMessage("Record was not added");
                }
            } else if (mode == 2) {
                boolean updated = false;

                try {
                    updated = activityController.updateActivity(act);
                } catch (SQLException ex) {
                    Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (updated) {
                    displayMessage("Record updated");
                    searchButtonActionPerformed(null);
                    mode = 0;
                    clearAndSet(false);
                } else {
                    displayMessage("Record was not updated");
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearAndSet(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        mode = 1;

        try {
            selectedID = activityController.getNextID();
        } catch (SQLException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        clearAndSet(true);
        activityText.requestFocus();
    }//GEN-LAST:event_addNewButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        clearAndSet(false);
        int row = activityTable.getSelectedRow();
        if (row != -1) {
            mode = 2;
            clearAndSet(true);
            selectedID = actIDArray[row];
            setFields();
        } else {
            displayMessage("Select an activity first");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        keyText.setText("");
        searchCombo.setSelectedIndex(0);
        clearAndSet(false);

        try {
            actList = activityController.getAllActivities();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        setTable();
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        keyTextActionPerformed(null);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
        int sel = searchCombo.getSelectedIndex();
        if (sel == 0) {
            type = "subID";
        } else if (sel == 1) {
            type = "activity";
        } else if (sel == 2) {
            type = "groups";
        } else if (sel == 3) {
            type = "centre";
        }
    }//GEN-LAST:event_searchComboActionPerformed

    private void keyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextActionPerformed
        clearAndSet(false);
        key = keyText.getText();
        if (!key.equals("")) {
            try {
                actList = activityController.searchActivities(key, type);
            } catch (SQLException ex) {
                Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
            }

            setTable();
        } else {
            viewAllButtonActionPerformed(null);
        }
    }//GEN-LAST:event_keyTextActionPerformed

    private void activityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityTableMouseClicked
        int count = evt.getClickCount();
        if (count == 1) {
            clearAndSet(false);
        } else if (count == 2) {
            editButtonActionPerformed(null);
        }
    }//GEN-LAST:event_activityTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int conf = JOptionPane.showConfirmDialog(editPanel, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (conf == 0) {
            boolean deleted = false;

            try {
                deleted = activityController.deleteActivity(selectedID);
            } catch (SQLException ex) {
                Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (deleted) {
                displayMessage("Record deleted");
                searchButtonActionPerformed(null);
                clearAndSet(false);
            } else {
                displayMessage("Record was not deleted");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void centreTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centreTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_centreTextActionPerformed

    private void activityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activityTextActionPerformed
        groupText.requestFocus();
        groupText.selectAll();
    }//GEN-LAST:event_activityTextActionPerformed

    private void fromTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTimeTextActionPerformed
        toTimeText.requestFocus();
        toTimeText.selectAll();
    }//GEN-LAST:event_fromTimeTextActionPerformed

    private void toTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toTimeTextActionPerformed
        centreText.requestFocus();
        centreText.selectAll();
    }//GEN-LAST:event_toTimeTextActionPerformed

    private void groupTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupTextActionPerformed
        fromTimeText.requestFocus();
        fromTimeText.selectAll();
    }//GEN-LAST:event_groupTextActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            String fromDate = "2013-11-10";
            String toDate = "2014-09-02";

            JRTableModelDataSource jrtmds = new JRTableModelDataSource(activityTableModel);

            Map dataSource = new HashMap();
            dataSource.put("details", jrtmds);

            Map param = new HashMap();
            param.put("fromDate", fromDate);
            param.put("toDate", toDate);

            JasperReport jr = JasperCompileManager.compileReport("./report/ActivitiesFullReport.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, param, jrtmds);
            JasperViewer.viewReport(jp, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, "Report generation failed.");
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActivityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActivityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActivityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActivityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ActivityDialog dialog = new ActivityDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activityTable;
    private javax.swing.JTextField activityText;
    private javax.swing.JButton addNewButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField centreText;
    private javax.swing.JButton closeButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JTextField fromTimeText;
    private javax.swing.JTextField groupText;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyText;
    private javax.swing.JButton printButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel selectedSubLabel;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTextField toTimeText;
    private javax.swing.JButton viewAllButton;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(360, 200);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void setSubsCombo() {
        ArrayList<String> subjectCodeList = null;
        int size = 0;

        try {
            subjectCodeList = subjectController.getSubjectCodes();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        size = subjectCodeList.size();
        subCodesArray = new String[size];

        if (size != 0) {
            for (int i = 0; i < size; i++) {
                subCodesArray[i] = subjectCodeList.get(i);
            }
        } else {
            subCodesArray[0] = "Add subjects";
        }

        subjectCombo.setModel(new DefaultComboBoxModel(subCodesArray));
        subjectCombo.setSelectedIndex(0);
    }

    private void displayMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabel.setText(" ");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                }

                infoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                }
                infoLabel.setText(" ");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                }

                infoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                }

                infoLabel.setText(" ");
            }
        }.start();
    }

    private void setFieldDocs() {
        fromTimeText.setDocument(new LengthRestrictedDocument(4));
        toTimeText.setDocument(new LengthRestrictedDocument(4));
    }

    private void clearAndSet(boolean b) {
        if (mode == 2) {
            subjectCombo.setSelectedIndex(0);
        }
        fromTimeText.setText("");
        toTimeText.setText("");
        centreText.setText("");
        groupText.setText("");
        activityText.setText("");
        dateChooser.setDate(null);

        jLabel3.setEnabled(b);
        jLabel4.setEnabled(b);
        jLabel5.setEnabled(b);
        jLabel6.setEnabled(b);
        jLabel7.setEnabled(b);
        jLabel8.setEnabled(b);
        jLabel9.setEnabled(b);
        selectedSubLabel.setVisible(b);

        subjectCombo.setEnabled(b);
        activityText.setEnabled(b);
        groupText.setEnabled(b);
        dateChooser.setEnabled(b);
        fromTimeText.setEnabled(b);
        toTimeText.setEnabled(b);
        centreText.setEnabled(b);

        deleteButton.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);

        activityFlag = false;
        dateFlag = false;
        fromTimeFlag = false;
        toTimeFlag = false;
        centreFlag = false;
    }

    private void setTable() {
        activityTableModel.setRowCount(0);

        if (!actList.isEmpty()) {
            actIDArray = new String[actList.size()];

            for (int i = 0; i < actList.size(); i++) {
                Activity ac = actList.get(i);

                actIDArray[i] = ac.getId();

                String time = String.format("%04d", ac.getFromTime()) + "-" + String.format("%04d", ac.getToTime());
                Object[] row = {ac.getSubID(), ac.getActivity(), ac.getGroups(), ac.getDate(), time, ac.getCentre()};
                activityTableModel.addRow(row);
            }
        }

        if (activityTable.getRowCount() == 0) {
            printButton.setEnabled(false);
        } else {
            printButton.setEnabled(true);
        }
    }

    private void setFields() {
        String subCode = (String) activityTable.getValueAt(activityTable.getSelectedRow(), 0), fromTime = null, toTime = null;
        int index = 0;

        for (int i = 0; i < subCodesArray.length; i++) {
            if (subCode.equals(subCodesArray[i])) {
                index = i;
            }
        }

        Date d = null;
        try {
            d = dFormat.parse((String) activityTable.getValueAt(activityTable.getSelectedRow(), 3));
        } catch (ParseException ex) {
            Logger.getLogger(ActivityDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        fromTime = (String) activityTable.getValueAt(activityTable.getSelectedRow(), 4);
        fromTime = fromTime.charAt(0) + "" + fromTime.charAt(1) + "" + fromTime.charAt(2) + "" + fromTime.charAt(3) + "";
        toTime = (String) activityTable.getValueAt(activityTable.getSelectedRow(), 4);
        toTime = toTime.charAt(5) + "" + toTime.charAt(6) + "" + toTime.charAt(7) + "" + toTime.charAt(8) + "";

        subjectCombo.setSelectedIndex(index);
        activityText.setText((String) activityTable.getValueAt(activityTable.getSelectedRow(), 1));
        groupText.setText((String) activityTable.getValueAt(activityTable.getSelectedRow(), 2));
        dateChooser.setDate(d);
        fromTimeText.setText(fromTime);
        toTimeText.setText(toTime);
        centreText.setText((String) activityTable.getValueAt(activityTable.getSelectedRow(), 5));

        activityText.requestFocus();
    }

    private Activity setActivity() {
        Activity act = null;
        String subID, activity, groups, date = null, centre;
        int fromTime = 0, toTime = 0;

        subID = (String) subjectCombo.getSelectedItem();
        activity = activityText.getText();
        if (!activity.equals("")) {
            activityFlag = true;
        }
        groups = groupText.getText();
        if (dateChooser.getDate() != null) {
            dateFlag = true;
            date = dFormat.format(dateChooser.getDate());
        }
        if (!fromTimeText.getText().equals("") && !toTimeText.getText().equals("")) {
            fromTime = Integer.parseInt(fromTimeText.getText());
            toTime = Integer.parseInt(toTimeText.getText());
            fromTimeFlag = true;
            toTimeFlag = true;
        }
        centre = centreText.getText();
        if (!centre.equals("")) {
            centreFlag = true;
        }

        act = new Activity(selectedID, subID, activity, groups, date, fromTime, toTime, centre);

        return act;
    }
}
